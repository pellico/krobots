syntax = "proto3";

package protobuffer.tank;

message Vector {
    float x = 1;
    float y = 2;
}

message TankStatus {
    uint32 tick =1;
    Vector velocity =2; //Velocity in m/sec
    float angle = 3; // The rotation angle in ]-pi; pi] .
    float cannon_angle = 4; // The rotation angle in ]-pi; pi] 
    float damage = 5; 
    float energy = 6; //Energy when 0 movement no longer possible
    bool success = 7; 
    float angvel = 8; //Rotational speed rad/sec
    float distance_power_source = 9; //Distance from power source
    float angle_power_source = 10; // Angle to power source world coordinates
    }

message TankRadar {
    float distance =1;
    float damage = 2;    
}

message RadarResult {
    uint32 tick = 1;
    float angle = 2; //radar angle rad
    repeated TankRadar tanks =4; //First 10 tanks
    }

message Command {
    fixed32 index =1;
    enum CommandId {
        /*arguments ignored
        return: TankStatus
        */
        GET_STATUS =0; 
        /*
        Move and get radar result
        argument1: radar increment [-PI/5,PI/5]
        argument2: beam witdth [0,PI/5]
        return: RadarResult
        */
        GET_RADAR_RESULT =1;
        /* Set forward power and rotation impulse
        argument1: In fraction of max speed from -1.0 to +1.0. Values that exceed are set to value MAX/MIN
        argument2 turning power from -1.0 (counter clockwise) to +1.0 clockwise Values outside this range are wrapped 
        return: TankStatus (always successfully)
        */
        SET_ENGINE_POWER =2; 
        /*
        Fire cannon
        return: TankStatus (always successfully)
        */
        FIRE_CANNON =3;
        /*
        Set cannon position
        argument1 --> Angle position in radians ]-PI,PI] relative to teh Tank angle.
        return: TankStatus (always successfully)
        */
        SET_CANNON_POSITION = 4;
        
    }
    CommandId command =2;
    float argument1 =3; 
    float argument2 =4; 
  
    }

/*
Used to register tank
Server answer with RegisterTankAnswer
*/
message RegisterTank {
    string name = 1;
}  


message SimulationConfig {
    float tank_energy_max = 1;
    float damage_max = 2;
    float bullet_max_range = 3;
    //Beyond this limit tank energy is decreased proportionaly with distance
    float zero_power_limit = 4;
    float radar_angle_increment_max = 5;
    float radar_width_max = 6;
    float radar_max_detection_range = 7;
    float bullet_speed = 8;
}
