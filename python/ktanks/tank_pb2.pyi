"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class PolarVector(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    R_FIELD_NUMBER: builtins.int
    P_FIELD_NUMBER: builtins.int
    r: builtins.float = ...
    p: builtins.float = ...
    def __init__(self,
        *,
        r : builtins.float = ...,
        p : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["p",b"p","r",b"r"]) -> None: ...
global___PolarVector = PolarVector

class TankStatus(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TICK_FIELD_NUMBER: builtins.int
    VELOCITY_FIELD_NUMBER: builtins.int
    ANGLE_FIELD_NUMBER: builtins.int
    CANNON_ANGLE_FIELD_NUMBER: builtins.int
    DAMAGE_FIELD_NUMBER: builtins.int
    ENERGY_FIELD_NUMBER: builtins.int
    SUCCESS_FIELD_NUMBER: builtins.int
    ANGVEL_FIELD_NUMBER: builtins.int
    POWER_SOURCE_FIELD_NUMBER: builtins.int
    CANNON_TEMP_FIELD_NUMBER: builtins.int
    tick: builtins.int = ...
    """Simualtion tick counter"""

    @property
    def velocity(self) -> global___PolarVector:
        """Velocity in (m/sec,rad) world reference"""
        pass
    angle: builtins.float = ...
    """The rotation angle in ]-pi; pi] ."""

    cannon_angle: builtins.float = ...
    """The rotation angle in ]-pi; pi]"""

    damage: builtins.float = ...
    energy: builtins.float = ...
    """Energy when 0 movement no longer possible"""

    success: builtins.bool = ...
    """Presently always true"""

    angvel: builtins.float = ...
    """Rotational speed rad/sec"""

    @property
    def power_source(self) -> global___PolarVector:
        """Position of power source in tank relative coordinates"""
        pass
    cannon_temp: builtins.float = ...
    """Cannon temperature"""

    def __init__(self,
        *,
        tick : builtins.int = ...,
        velocity : typing.Optional[global___PolarVector] = ...,
        angle : builtins.float = ...,
        cannon_angle : builtins.float = ...,
        damage : builtins.float = ...,
        energy : builtins.float = ...,
        success : builtins.bool = ...,
        angvel : builtins.float = ...,
        power_source : typing.Optional[global___PolarVector] = ...,
        cannon_temp : builtins.float = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["power_source",b"power_source","velocity",b"velocity"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["angle",b"angle","angvel",b"angvel","cannon_angle",b"cannon_angle","cannon_temp",b"cannon_temp","damage",b"damage","energy",b"energy","power_source",b"power_source","success",b"success","tick",b"tick","velocity",b"velocity"]) -> None: ...
global___TankStatus = TankStatus

class TankRadar(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    DISTANCE_FIELD_NUMBER: builtins.int
    DAMAGE_FIELD_NUMBER: builtins.int
    distance: builtins.float = ...
    damage: builtins.float = ...
    def __init__(self,
        *,
        distance : builtins.float = ...,
        damage : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["damage",b"damage","distance",b"distance"]) -> None: ...
global___TankRadar = TankRadar

class RadarResult(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TICK_FIELD_NUMBER: builtins.int
    ANGLE_FIELD_NUMBER: builtins.int
    TANKS_FIELD_NUMBER: builtins.int
    tick: builtins.int = ...
    """Simulation tick counter"""

    angle: builtins.float = ...
    """radar angle rad"""

    @property
    def tanks(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TankRadar]:
        """First 10 tanks"""
        pass
    def __init__(self,
        *,
        tick : builtins.int = ...,
        angle : builtins.float = ...,
        tanks : typing.Optional[typing.Iterable[global___TankRadar]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["angle",b"angle","tanks",b"tanks","tick",b"tick"]) -> None: ...
global___RadarResult = RadarResult

class Command(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _CommandId:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _CommandIdEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_CommandId.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        GET_STATUS: Command.CommandId.ValueType = ...  # 0
        """arguments ignored
        return: TankStatus
        """

        GET_RADAR_RESULT: Command.CommandId.ValueType = ...  # 1
        """
        Move and get radar result
        argument1: radar increment [-PI/5,PI/5]
        argument2: beam witdth [0,PI/5]
        return: RadarResult
        """

        SET_ENGINE_POWER: Command.CommandId.ValueType = ...  # 2
        """Set forward power and rotation impulse
        argument1: In fraction of max speed from -1.0 to +1.0. Values that exceed are set to value MAX/MIN
        argument2 turning power from -1.0 (counter clockwise) to +1.0 clockwise Values outside this range are wrapped 
        return: TankStatus (always successfully)
        """

        FIRE_CANNON: Command.CommandId.ValueType = ...  # 3
        """
        Fire cannon
        return: TankStatus (always successfully)
        """

        SET_CANNON_POSITION: Command.CommandId.ValueType = ...  # 4
        """
        Set cannon position
        argument1: Angle position in radians ]-PI,PI] relative to teh Tank angle.
        return: TankStatus (always successfully)
        """

    class CommandId(_CommandId, metaclass=_CommandIdEnumTypeWrapper):
        pass

    GET_STATUS: Command.CommandId.ValueType = ...  # 0
    """arguments ignored
    return: TankStatus
    """

    GET_RADAR_RESULT: Command.CommandId.ValueType = ...  # 1
    """
    Move and get radar result
    argument1: radar increment [-PI/5,PI/5]
    argument2: beam witdth [0,PI/5]
    return: RadarResult
    """

    SET_ENGINE_POWER: Command.CommandId.ValueType = ...  # 2
    """Set forward power and rotation impulse
    argument1: In fraction of max speed from -1.0 to +1.0. Values that exceed are set to value MAX/MIN
    argument2 turning power from -1.0 (counter clockwise) to +1.0 clockwise Values outside this range are wrapped 
    return: TankStatus (always successfully)
    """

    FIRE_CANNON: Command.CommandId.ValueType = ...  # 3
    """
    Fire cannon
    return: TankStatus (always successfully)
    """

    SET_CANNON_POSITION: Command.CommandId.ValueType = ...  # 4
    """
    Set cannon position
    argument1: Angle position in radians ]-PI,PI] relative to teh Tank angle.
    return: TankStatus (always successfully)
    """


    INDEX_FIELD_NUMBER: builtins.int
    COMMAND_FIELD_NUMBER: builtins.int
    ARGUMENT1_FIELD_NUMBER: builtins.int
    ARGUMENT2_FIELD_NUMBER: builtins.int
    index: builtins.int = ...
    command: global___Command.CommandId.ValueType = ...
    argument1: builtins.float = ...
    argument2: builtins.float = ...
    def __init__(self,
        *,
        index : builtins.int = ...,
        command : global___Command.CommandId.ValueType = ...,
        argument1 : builtins.float = ...,
        argument2 : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["argument1",b"argument1","argument2",b"argument2","command",b"command","index",b"index"]) -> None: ...
global___Command = Command

class RegisterTank(google.protobuf.message.Message):
    """
    Used to register tank
    Server answer with RegisterTankAnswer
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    def __init__(self,
        *,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___RegisterTank = RegisterTank

class SimulationConfig(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TANK_ENERGY_MAX_FIELD_NUMBER: builtins.int
    DAMAGE_MAX_FIELD_NUMBER: builtins.int
    BULLET_MAX_RANGE_FIELD_NUMBER: builtins.int
    ZERO_POWER_LIMIT_FIELD_NUMBER: builtins.int
    RADAR_ANGLE_INCREMENT_MAX_FIELD_NUMBER: builtins.int
    RADAR_WIDTH_MAX_FIELD_NUMBER: builtins.int
    RADAR_MAX_DETECTION_RANGE_FIELD_NUMBER: builtins.int
    BULLET_SPEED_FIELD_NUMBER: builtins.int
    MAX_FORWARD_POWER_FIELD_NUMBER: builtins.int
    MAX_TURNING_POWER_FIELD_NUMBER: builtins.int
    DEBUG_MODE_FIELD_NUMBER: builtins.int
    tank_energy_max: builtins.float = ...
    damage_max: builtins.float = ...
    bullet_max_range: builtins.float = ...
    zero_power_limit: builtins.float = ...
    """Beyond this limit tank energy is decreased proportionaly with distance"""

    radar_angle_increment_max: builtins.float = ...
    radar_width_max: builtins.float = ...
    radar_max_detection_range: builtins.float = ...
    bullet_speed: builtins.float = ...
    max_forward_power: builtins.float = ...
    max_turning_power: builtins.float = ...
    debug_mode: builtins.bool = ...
    """When true all client shall run in debug mode. --> Wait forever for answer from server."""

    def __init__(self,
        *,
        tank_energy_max : builtins.float = ...,
        damage_max : builtins.float = ...,
        bullet_max_range : builtins.float = ...,
        zero_power_limit : builtins.float = ...,
        radar_angle_increment_max : builtins.float = ...,
        radar_width_max : builtins.float = ...,
        radar_max_detection_range : builtins.float = ...,
        bullet_speed : builtins.float = ...,
        max_forward_power : builtins.float = ...,
        max_turning_power : builtins.float = ...,
        debug_mode : builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["bullet_max_range",b"bullet_max_range","bullet_speed",b"bullet_speed","damage_max",b"damage_max","debug_mode",b"debug_mode","max_forward_power",b"max_forward_power","max_turning_power",b"max_turning_power","radar_angle_increment_max",b"radar_angle_increment_max","radar_max_detection_range",b"radar_max_detection_range","radar_width_max",b"radar_width_max","tank_energy_max",b"tank_energy_max","zero_power_limit",b"zero_power_limit"]) -> None: ...
global___SimulationConfig = SimulationConfig
